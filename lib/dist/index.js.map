{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { ZomeClient } from '@holochain-open-dev/utils';\nimport {\n  AgentPubKey,\n  AppCallZomeRequest,\n  AppClient,\n  AppWebsocket,\n  AppWebsocketConnectionOptions,\n} from '@holochain/client';\nimport {\n  CreateOrDeleteLinksInput,\n  CreateThingInput,\n  DeleteThingInput,\n  GenericZomeSignal,\n  LinkDirection,\n  LinkDirectionRust,\n  LinkInput,\n  LinkInputRust,\n  NodeContent,\n  NodeId,\n  Thing,\n  ThingId,\n  UpdateThingInput,\n} from './types';\n\nexport * from './types';\n\nexport class SimpleHolochain {\n  private client: AppClient;\n  private zomeClient: ZomeClient<GenericZomeSignal>;\n  private roleName: string;\n  private zomeName: string;\n\n  private constructor(\n    client: AppClient,\n    zomeClient: ZomeClient<GenericZomeSignal>,\n    roleName: string = 'generic_dna',\n    zomeName: string = 'generic_zome'\n  ) {\n    this.client = client;\n    this.zomeClient = zomeClient;\n    this.roleName = roleName;\n    this.zomeName = zomeName;\n    // TODO set up signal listener. Potentially emit signal to conductor\n  }\n\n  static async connect(options: AppWebsocketConnectionOptions = {}) {\n    const client = await AppWebsocket.connect(options);\n    const zomeClient = new ZomeClient<GenericZomeSignal>(\n      client,\n      'generic_dna',\n      'generic_zome'\n    );\n    return new SimpleHolochain(client, zomeClient);\n  }\n\n  /**\n   * Creates a \"Thing\", i.e. an arbitrary piece of content in the DHT. You are responsible\n   * yourself for making sure that the content adheres to the format you want\n   * it to adhere.\n   *\n   * @param content\n   * @param links\n   * @returns\n   */\n  async createThing(content: string, links?: LinkInput[]): Promise<Thing> {\n    let input: CreateThingInput = {\n      content,\n      links: links ? links.map(link => linkInputToRustFormat(link)) : undefined,\n    };\n    return this.callZome('create_thing', input);\n  }\n\n  /**\n   * Update the content of a thing without changing any of\n   * the links that point to or from it.\n   *\n   * @param thingId\n   * @param updatedContent\n   * @returns\n   */\n  async updateThing(thingId: ThingId, updatedContent: string): Promise<Thing> {\n    let input: UpdateThingInput = {\n      thing_id: thingId,\n      updated_content: updatedContent,\n    };\n    return this.callZome('udpate_thing', input);\n  }\n\n  /**\n   * Deletes a Thing as well as optionally any backlinks of\n   * 'bidirectional' links that were created with this Thing\n   * as the source. A Thing is unaware of 'from' links\n   * pointing to it from elsewhere (including bidirectional links * that were created from another node as the src).\n   * Such links (or any other links) need to be explicitly deleted * by passing them with the 'links' argument or using the\n   * `deleteLink` function.\n   *\n   * @param thingId\n   * @param deleteBacklinks\n   * @param deleteLinksFromCreator\n   * @param deleteLinks\n   * @returns\n   */\n  async deleteThing(\n    thingId: ThingId,\n    deleteBacklinks: boolean,\n    deleteLinksFromCreator: boolean,\n    deleteLinks?: LinkInput[]\n  ): Promise<void> {\n    let input: DeleteThingInput = {\n      thing_id: thingId,\n      delete_backlinks: deleteBacklinks,\n      delete_links_from_creator: deleteLinksFromCreator,\n      delete_links: deleteLinks\n        ? deleteLinks.map(link => linkInputToRustFormat(link))\n        : undefined,\n    };\n    return this.callZome('delete_thing', input);\n  }\n\n  /**\n   * Gets the latest known version of a thing (it's possible that other peers\n   * have updated it but they are now offline and we don't know about it)\n   *\n   * @param thingId\n   * @returns\n   */\n  async getThing(thingId: ThingId): Promise<Thing> {\n    return this.callZome('get_thing', thingId);\n  }\n\n  /**\n   * Get all the nodes that are linked from the specified source node\n   *\n   * @param src\n   * @returns\n   */\n  async getAllLinkedNodes(src: NodeId): Promise<NodeContent> {\n    return this.callZome('get_all_linked_nodes', src);\n  }\n\n  /**\n   * Get all the agents that are linked from the specified source node\n   *\n   * @param src\n   * @returns\n   */\n  async getLinkedAgents(src: NodeId): Promise<AgentPubKey[]> {\n    return this.callZome('get_linked_agents', src);\n  }\n\n  /**\n   * Get all the anchors that are linked from the specified source node\n   *\n   * @param src\n   * @returns\n   */\n  async getLinkedAnchors(src: NodeId): Promise<string[]> {\n    return this.callZome('get_linked_anchors', src);\n  }\n\n  /**\n   * Get the latest versions of all Things that are linked from the\n   * specified source node\n   *\n   * @param src\n   * @returns\n   */\n  async getLinkedThings(src: NodeId): Promise<Thing[]> {\n    return this.callZome('get_linked_things', src);\n  }\n\n  /**\n   * Creates links from a specified source node\n   *\n   * @param src\n   * @param links\n   * @returns\n   */\n  async createLinks(src: NodeId, links: LinkInput[]): Promise<void> {\n    const input: CreateOrDeleteLinksInput = {\n      src,\n      links: links.map(link => linkInputToRustFormat(link)),\n    };\n    return this.callZome('create_links_from_node', input);\n  }\n\n  /**\n   * Will delete the specified links.\n   * If a tag is provided in the LinkInput, only links\n   * with this same tag will be deleted. Otherwise only\n   * links without tag will be deleted.\n   *\n   * @param src\n   * @param links\n   * @returns\n   */\n  async deleteLinks(src: NodeId, links: LinkInput[]): Promise<void> {\n    const input: CreateOrDeleteLinksInput = {\n      src,\n      links: links.map(link => linkInputToRustFormat(link)),\n    };\n    return this.callZome('delete_links_from_node', input);\n  }\n\n  private callZome(fn_name: string, payload: any) {\n    const req: AppCallZomeRequest = {\n      role_name: this.roleName,\n      zome_name: this.zomeName,\n      fn_name,\n      payload,\n    };\n    return this.client.callZome(req);\n  }\n}\n\nfunction linkInputToRustFormat(linkInput: LinkInput): LinkInputRust {\n  let linkDirection: LinkDirectionRust;\n  switch (linkInput.direction) {\n    case LinkDirection.From:\n      linkDirection = {\n        type: 'From',\n      };\n    case LinkDirection.To:\n      linkDirection = { type: 'To' };\n    case LinkDirection.Bidirectional:\n      linkDirection = { type: 'Bidirectional' };\n  }\n  return {\n    direction: linkDirection,\n    nodeId: linkInput.nodeId,\n    tag: linkInput.tag,\n  };\n}\n"]}
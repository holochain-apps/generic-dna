{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAkGA,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,iDAAI,CAAA;IACJ,6CAAE,CAAA;IACF,mEAAa,CAAA;AACf,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB","sourcesContent":["import {\n  ActionHash,\n  AgentPubKey,\n  Create,\n  CreateLink,\n  Delete,\n  DeleteLink,\n  SignedActionHashed,\n  Update,\n} from '@holochain/client';\n\nexport type GenericZomeSignal =\n  | {\n      type: 'EntryCreated';\n      action: SignedActionHashed<Create>;\n      app_entry: EntryTypes;\n    }\n  | {\n      type: 'EntryUpdated';\n      action: SignedActionHashed<Update>;\n      app_entry: EntryTypes;\n      original_app_entry: EntryTypes;\n    }\n  | {\n      type: 'EntryDeleted';\n      action: SignedActionHashed<Delete>;\n      original_app_entry: EntryTypes;\n    }\n  | {\n      type: 'LinkCreated';\n      action: SignedActionHashed<CreateLink>;\n      link_type: string;\n    }\n  | {\n      type: 'LinkDeleted';\n      action: SignedActionHashed<DeleteLink>;\n      link_type: string;\n    };\n\n/* dprint-ignore-start */\nexport type EntryTypes = { type: 'Thing' } & ThingEntry;\n/* dprint-ignore-end */\n\nexport interface ThingEntry {\n  content: string;\n}\n\n/**\n * A node in the graph can be of three distinct types, identified in different ways\n */\nexport type NodeId =\n  | {\n      type: 'anchor';\n      id: string;\n    }\n  | {\n      type: 'thing';\n      id: ThingId; // \"id\" --> original action hash\n    }\n  | {\n      type: 'agent';\n      id: AgentPubKey;\n    };\n\nexport type NodeContent =\n  | {\n      type: 'anchor';\n      content: string;\n    }\n  | {\n      type: 'thing';\n      content: Thing;\n    }\n  | {\n      type: 'agent';\n      content: AgentPubKey;\n    };\n\n/**\n * An anchor is a known location identified by a string to\n * or from which things can be linked\n */\nexport type Anchor = string;\n\n/**\n * A thing is a piece of arbitrary content identified by a\n * ThingHash\n */\nexport type Thing = {\n  id: ThingId;\n  content: string;\n  creator: AgentPubKey;\n  created_at: number;\n  updated_at: number;\n};\n\nexport type ThingId = ActionHash;\n\nexport enum LinkDirection {\n  From,\n  To,\n  Bidirectional,\n}\n\nexport type LinkInput = {\n  direction: LinkDirection;\n  nodeId: NodeId;\n  tag?: Uint8Array;\n};\n\nexport type LinkDirectionRust =\n  | {\n      type: 'From';\n    }\n  | {\n      type: 'To';\n    }\n  | {\n      type: 'Bidirectional';\n    };\n\nexport type LinkInputRust = {\n  direction: LinkDirectionRust;\n  nodeId: NodeId;\n  tag?: Uint8Array;\n};\n\nexport type CreateThingInput = {\n  content: string;\n  links?: LinkInputRust[];\n};\n\nexport type UpdateThingInput = {\n  thing_id: ActionHash;\n  updated_content: string;\n};\n\nexport type DeleteThingInput = {\n  thing_id: ActionHash,\n  delete_backlinks: boolean,\n  delete_links_from_creator: boolean,\n  delete_links?: LinkInputRust[],\n}\n\nexport type CreateOrDeleteLinksInput = {\n  src: NodeId,\n  links: LinkInputRust[],\n};"]}